// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  moderator
  viewer
}

enum Status {
  new
  processed
  completed
  rejected
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  login     String   @unique
  name      String?
  email     String?
  role      Role     @default(viewer)
  password  String
  createdAt DateTime @default(now())

  meets    Meet[] // Связь с конференциями
  lectures Lecture[] // Связь с лекциями
}

model Lecture {
  id        String  @id @default(uuid()) @db.Uuid
  group     String? // Группа
  lector    String? // Лектор
  platform  String? // Платформа проведения
  unit      String? // Корпус
  location  String? // Место проведения
  url       String? // Ссылка
  shortUrl  String? // Короткая ссылка
  streamKey String? // Ключ для проведения стрима

  description  String? // Комментарий
  adminId      String?   @db.Uuid
  admin        User?     @relation(fields: [adminId], references: [id])
  date         DateTime // Дата проведения лекции
  start        DateTime? // Начало 
  end          DateTime? // Конец
  abnormalTime String? // Время не по графику
  createdAt    DateTime  @default(now()) // Дата и время создания
  updatedAt    DateTime? @updatedAt // Дата и время последнего изменения
}

model Meet {
  id           String  @id @default(uuid()) @db.Uuid
  eventName    String? // Название мероприятия
  customerName String? // Имя заказчика 
  email        String? // Почта заказчика
  phone        String? // Телефон заказчика
  location     String? // Место проведения
  platform     String? // Платформа проведения
  devices      String? // Оборудование
  url          String? // Ссылка для провденеия
  shortUrl     String? // Короткая ссылка

  status      Status    @default(new) // Статус обработки
  description String? // Комментарий
  adminId     String?   @db.Uuid
  admin       User?     @relation(fields: [adminId], references: [id]) // Администратор мероприятия
  start       DateTime? // Начало мероприятия
  end         DateTime? // Конец мероприятия
  createdAt   DateTime  @default(now()) // Дата и время создания
  updatedAt   DateTime? @updatedAt // Дата и время последнего изменения
}
